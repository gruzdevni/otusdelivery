// Code generated by go-swagger; DO NOT EDIT.

package delivery

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"otusdelivery/internal/models"
)

// PostReserveSlotOKCode is the HTTP code returned for type PostReserveSlotOK
const PostReserveSlotOKCode int = 200

/*
PostReserveSlotOK Успешное создание пользователя

swagger:response postReserveSlotOK
*/
type PostReserveSlotOK struct {

	/*
	  In: Body
	*/
	Payload *models.DefaultStatusResponse `json:"body,omitempty"`
}

// NewPostReserveSlotOK creates PostReserveSlotOK with default headers values
func NewPostReserveSlotOK() *PostReserveSlotOK {

	return &PostReserveSlotOK{}
}

// WithPayload adds the payload to the post reserve slot o k response
func (o *PostReserveSlotOK) WithPayload(payload *models.DefaultStatusResponse) *PostReserveSlotOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post reserve slot o k response
func (o *PostReserveSlotOK) SetPayload(payload *models.DefaultStatusResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostReserveSlotOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostReserveSlotBadRequestCode is the HTTP code returned for type PostReserveSlotBadRequest
const PostReserveSlotBadRequestCode int = 400

/*
PostReserveSlotBadRequest Клиентская ошибка

swagger:response postReserveSlotBadRequest
*/
type PostReserveSlotBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.DefaultStatusResponse `json:"body,omitempty"`
}

// NewPostReserveSlotBadRequest creates PostReserveSlotBadRequest with default headers values
func NewPostReserveSlotBadRequest() *PostReserveSlotBadRequest {

	return &PostReserveSlotBadRequest{}
}

// WithPayload adds the payload to the post reserve slot bad request response
func (o *PostReserveSlotBadRequest) WithPayload(payload *models.DefaultStatusResponse) *PostReserveSlotBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post reserve slot bad request response
func (o *PostReserveSlotBadRequest) SetPayload(payload *models.DefaultStatusResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostReserveSlotBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostReserveSlotInternalServerErrorCode is the HTTP code returned for type PostReserveSlotInternalServerError
const PostReserveSlotInternalServerErrorCode int = 500

/*
PostReserveSlotInternalServerError Серверная ошибка

swagger:response postReserveSlotInternalServerError
*/
type PostReserveSlotInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.DefaultStatusResponse `json:"body,omitempty"`
}

// NewPostReserveSlotInternalServerError creates PostReserveSlotInternalServerError with default headers values
func NewPostReserveSlotInternalServerError() *PostReserveSlotInternalServerError {

	return &PostReserveSlotInternalServerError{}
}

// WithPayload adds the payload to the post reserve slot internal server error response
func (o *PostReserveSlotInternalServerError) WithPayload(payload *models.DefaultStatusResponse) *PostReserveSlotInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post reserve slot internal server error response
func (o *PostReserveSlotInternalServerError) SetPayload(payload *models.DefaultStatusResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostReserveSlotInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
