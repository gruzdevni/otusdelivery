// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0

package query

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.checkOrderDeliveryStmt, err = db.PrepareContext(ctx, checkOrderDelivery); err != nil {
		return nil, fmt.Errorf("error preparing query CheckOrderDelivery: %w", err)
	}
	if q.decreaseAvailableSlotStmt, err = db.PrepareContext(ctx, decreaseAvailableSlot); err != nil {
		return nil, fmt.Errorf("error preparing query DecreaseAvailableSlot: %w", err)
	}
	if q.getAvailableSlotStmt, err = db.PrepareContext(ctx, getAvailableSlot); err != nil {
		return nil, fmt.Errorf("error preparing query GetAvailableSlot: %w", err)
	}
	if q.increaseAvailableSlotStmt, err = db.PrepareContext(ctx, increaseAvailableSlot); err != nil {
		return nil, fmt.Errorf("error preparing query IncreaseAvailableSlot: %w", err)
	}
	if q.reserveSlotForOrderStmt, err = db.PrepareContext(ctx, reserveSlotForOrder); err != nil {
		return nil, fmt.Errorf("error preparing query ReserveSlotForOrder: %w", err)
	}
	if q.unreserveSlotForOrderStmt, err = db.PrepareContext(ctx, unreserveSlotForOrder); err != nil {
		return nil, fmt.Errorf("error preparing query UnreserveSlotForOrder: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.checkOrderDeliveryStmt != nil {
		if cerr := q.checkOrderDeliveryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing checkOrderDeliveryStmt: %w", cerr)
		}
	}
	if q.decreaseAvailableSlotStmt != nil {
		if cerr := q.decreaseAvailableSlotStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing decreaseAvailableSlotStmt: %w", cerr)
		}
	}
	if q.getAvailableSlotStmt != nil {
		if cerr := q.getAvailableSlotStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAvailableSlotStmt: %w", cerr)
		}
	}
	if q.increaseAvailableSlotStmt != nil {
		if cerr := q.increaseAvailableSlotStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing increaseAvailableSlotStmt: %w", cerr)
		}
	}
	if q.reserveSlotForOrderStmt != nil {
		if cerr := q.reserveSlotForOrderStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing reserveSlotForOrderStmt: %w", cerr)
		}
	}
	if q.unreserveSlotForOrderStmt != nil {
		if cerr := q.unreserveSlotForOrderStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing unreserveSlotForOrderStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                        DBTX
	tx                        *sql.Tx
	checkOrderDeliveryStmt    *sql.Stmt
	decreaseAvailableSlotStmt *sql.Stmt
	getAvailableSlotStmt      *sql.Stmt
	increaseAvailableSlotStmt *sql.Stmt
	reserveSlotForOrderStmt   *sql.Stmt
	unreserveSlotForOrderStmt *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                        tx,
		tx:                        tx,
		checkOrderDeliveryStmt:    q.checkOrderDeliveryStmt,
		decreaseAvailableSlotStmt: q.decreaseAvailableSlotStmt,
		getAvailableSlotStmt:      q.getAvailableSlotStmt,
		increaseAvailableSlotStmt: q.increaseAvailableSlotStmt,
		reserveSlotForOrderStmt:   q.reserveSlotForOrderStmt,
		unreserveSlotForOrderStmt: q.unreserveSlotForOrderStmt,
	}
}
