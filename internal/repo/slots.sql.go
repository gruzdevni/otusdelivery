// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: slots.sql

package query

import (
	"context"
)

const checkOrderDelivery = `-- name: CheckOrderDelivery :one
SELECT id, order_id, slot_id FROM slot_reservations WHERE order_id = $1
`

func (q *Queries) CheckOrderDelivery(ctx context.Context, orderID string) (SlotReservation, error) {
	row := q.queryRow(ctx, q.checkOrderDeliveryStmt, checkOrderDelivery, orderID)
	var i SlotReservation
	err := row.Scan(&i.ID, &i.OrderID, &i.SlotID)
	return i, err
}

const decreaseAvailableSlot = `-- name: DecreaseAvailableSlot :exec
UPDATE available_slots SET available_quantity = available_quantity - 1 WHERE id = $1
`

func (q *Queries) DecreaseAvailableSlot(ctx context.Context, slotID int32) error {
	_, err := q.exec(ctx, q.decreaseAvailableSlotStmt, decreaseAvailableSlot, slotID)
	return err
}

const getAvailableSlot = `-- name: GetAvailableSlot :one
SELECT available_slots.available_quantity FROM available_slots WHERE id = $1
`

func (q *Queries) GetAvailableSlot(ctx context.Context, slotID int32) (int32, error) {
	row := q.queryRow(ctx, q.getAvailableSlotStmt, getAvailableSlot, slotID)
	var available_quantity int32
	err := row.Scan(&available_quantity)
	return available_quantity, err
}

const increaseAvailableSlot = `-- name: IncreaseAvailableSlot :exec
UPDATE available_slots SET available_quantity = available_quantity + 1 WHERE id = $1
`

func (q *Queries) IncreaseAvailableSlot(ctx context.Context, slotID int32) error {
	_, err := q.exec(ctx, q.increaseAvailableSlotStmt, increaseAvailableSlot, slotID)
	return err
}

const reserveSlotForOrder = `-- name: ReserveSlotForOrder :exec
INSERT INTO slot_reservations (order_id, slot_id) VALUES ($1, $2) ON CONFLICT (order_id) DO UPDATE SET slot_id = $2
`

type ReserveSlotForOrderParams struct {
	OrderID string
	SlotID  int32
}

func (q *Queries) ReserveSlotForOrder(ctx context.Context, arg ReserveSlotForOrderParams) error {
	_, err := q.exec(ctx, q.reserveSlotForOrderStmt, reserveSlotForOrder, arg.OrderID, arg.SlotID)
	return err
}

const unreserveSlotForOrder = `-- name: UnreserveSlotForOrder :exec
DELETE FROM slot_reservations WHERE order_id = $1
`

func (q *Queries) UnreserveSlotForOrder(ctx context.Context, orderID string) error {
	_, err := q.exec(ctx, q.unreserveSlotForOrderStmt, unreserveSlotForOrder, orderID)
	return err
}
